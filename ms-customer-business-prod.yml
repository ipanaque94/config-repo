server:
  port: 8081

spring:
  application:
    name: ms-customer-business

  cloud:
    config:
      import: "optional:configserver:http://config-server:8888"

  data:
    mongodb:
      uri: mongodb+srv://rodasenoc4_db_user:LVDqpURVaOZbfkQz@nnt-distributed-db.effpohk.mongodb.net/nnt-db?retryWrites=true&w=majority&appName=nnt-distributed-db

  kafka:
    bootstrap-servers: ${KAFKA_BROKER:kafka:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: customer-group
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.customer.business.event.dto,com.customer.business.model"

  redis:
    host: redis
    port: 6379

eureka:
  client:
    service-url:
      defaultZone: http://eureka-server:8761/eureka/

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,threaddump
  endpoint:
    health:
      show-details: always

resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 50
        minimumNumberOfCalls: 10
        permittedNumberOfCallsInHalfOpenState: 5
        waitDurationInOpenState: 30s
        failureRateThreshold: 50
    instances:
      productService:
        baseConfig: default

  timelimiter:
    configs:
      default:
        timeoutDuration: 2s
    instances:
      productService:
        baseConfig: default
